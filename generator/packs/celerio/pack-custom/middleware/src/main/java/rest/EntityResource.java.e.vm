## Copyright 2015 JAXIO http://www.jaxio.com
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
$output.java($entity.rest)##

$output.require("io.swagger.annotations.ApiOperation")##
$output.require("org.springframework.data.querydsl.binding.QuerydslPredicate")##
$output.require("com.querydsl.core.types.Predicate")##
$output.require("lombok.extern.slf4j.Slf4j")##
#if($entity.hasUniqueBigIntegerAttribute())
    $output.require("java.math.BigInteger")##
#end
#if($entity.hasUniqueDateAttribute()||$entity.root.hasDatePk())
    $output.require("java.util.Date")##
#end
$output.require($entity.model)##
$output.require($entity.root.primaryKey)##
#foreach($enumAttribute in $entity.uniqueEnumAttributes.list)
$output.require($enumAttribute)##
#end

$output.require("org.springframework.data.domain.*")##

$output.require($entity.repository)##
$output.require("java.util.List")##
$output.require("java.util.Optional")##
$output.require("javax.inject.Inject")##
$output.requireStatic("org.springframework.web.bind.annotation.RequestMethod.*")##
$output.require("org.springframework.web.bind.annotation.*")##
$output.requireStatic("org.springframework.http.MediaType.APPLICATION_JSON_VALUE")##
$output.require("org.springframework.http.ResponseEntity")##
$output.require("org.springframework.web.bind.annotation.RequestBody")##
$output.require("org.springframework.http.HttpHeaders")##
$output.require("org.springframework.http.HttpStatus")##

@Slf4j
@RestController
@RequestMapping("/api/${entity.model.vars}")
public class $output.currentClass{

    @Inject
    private $entity.repository.type $entity.repository.var;

   /**
    * Find by id ${entity.model.type}.
    */
    @RequestMapping(value = "/{id}", method = GET)
    public ResponseEntity<$entity.model.type> findOne(@PathVariable $entity.primaryKey.type $entity.primaryKey.var) {

        log.debug("Find by id $entity.model.type : {}", $entity.primaryKey.var);

        $entity.model.type record = ${entity.repository.var}.findOne($entity.primaryKey.var);

        ResponseEntity<$entity.model.type> result = Optional.ofNullable(record)
            .map(existingRecord -> new ResponseEntity<>(existingRecord, HttpStatus.OK))
            .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        return result;
    }


#foreach ($attribute in $entity.fileAttributes.list)
$output.require("org.springframework.web.multipart.MultipartFile")##
$output.require("java.io.IOException")##
$output.require("org.springframework.web.bind.annotation.RequestParam")##

    /**
     * Target url for ${attribute.var} file upload.
     */
    @RequestMapping(value = "/{id}/upload/${attribute.var}", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> ${attribute.var}FileUpload(@PathVariable $entity.primaryKey.type $entity.primaryKey.var, @RequestParam("$attribute.var") MultipartFile multipartFile) {

        log.debug("File Upload: {}", multipartFile.getName());

        $entity.model.type $entity.model.var = ${entity.repository.var}.findOne($entity.primaryKey.var);

        try {
            ${entity.model.var}.${attribute.setter}(multipartFile.getBytes());
        } catch (IOException ioe) {
            // todo: appropriate status code
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }

#if ($attribute.fileSize)
        ${entity.model.var}.${attribute.fileSize.setter}(multipartFile.getSize());
#end
#if ($attribute.fileContentType)
        ${entity.model.var}.${attribute.fileContentType.setter}(multipartFile.getContentType());
#end
#if ($attribute.filename)
        ${entity.model.var}.${attribute.filename.setter}(multipartFile.getOriginalFilename());
#end
        ${entity.repository.var}.save($entity.model.var);

        return ResponseEntity.ok().build();
    }

    /**
     * File download facility for ${attribute.var}.
     */
    @RequestMapping(value = "/{id}/download/${attribute.var}", method = GET)
    @ResponseBody
    public ResponseEntity<byte[]> ${attribute.var}FileDownload(@PathVariable $entity.primaryKey.type $entity.primaryKey.var) {

        $entity.model.type $entity.model.var = ${entity.repository.var}.findOne($entity.primaryKey.var);

#if ($attribute.filename)
        log.debug("File Download: {}", ${entity.model.var}.${attribute.filename.getter}());
#end
        return ResponseEntity
            .ok()
#if ($attribute.fileContentType)
            .header(HttpHeaders.CONTENT_TYPE, ${entity.model.var}.${attribute.fileContentType.getter}())
#end
#if ($attribute.filename)
            .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + ${entity.model.var}.${attribute.filename.getter}() + "\"")
#end
#if ($attribute.fileSize)
            .contentLength(${entity.model.var}.${attribute.fileSize.getter}())
#end
            .body(${entity.model.var}.${attribute.getter}());
    }
#end


    /**
     * Find a Page of $entity.model.type using query by example.
     */
    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Find")
    public Page<$entity.model.type> findAll(@QuerydslPredicate(root = ${entity.model.type}.class) Predicate predicate, Pageable pageable) {
        return ${entity.repository.var}.findAll(predicate, pageable);
    }

    /**
    * Save ${entity.model.type}.
    */
    @RequestMapping(method = RequestMethod.POST)
    @ApiOperation(value = "Save")
    public ResponseEntity<$entity.model.type> save(@RequestBody $entity.model.type $entity.model.var) {

    log.debug("Save $entity.model.type : {}", $entity.model.var);
$entity.model.type result = ${entity.repository.var}.save($entity.model.var);

    return ResponseEntity.ok().body(result);
    }

    /**
     * Delete by id ${entity.model.type}.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Delete")
    public ResponseEntity<Void> delete(@PathVariable $entity.primaryKey.type $entity.primaryKey.var) {

        log.debug("Delete by id $entity.model.type : {}", $entity.primaryKey.var);

        try {
            ${entity.repository.var}.delete($entity.primaryKey.var);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely org.hibernate.exception.ConstraintViolationException
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}