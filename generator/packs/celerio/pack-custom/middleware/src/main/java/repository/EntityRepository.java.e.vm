## Copyright 2015 JAXIO http://www.jaxio.com
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
$output.java($entity.repository)##

$output.require("java.util.List")##
#if ($entity.hasUniqueBigIntegerAttribute())
$output.require("java.math.BigInteger")##
#end
#if ($entity.hasUniqueDateAttribute() || $entity.root.hasDatePk())
$output.require("java.util.Date")##
#end
#set( $QueryDslModel = $entity.model.packageName + ".Q" + $entity.model.type )
$output.require($entity.model)##
$output.require($QueryDslModel)##
$output.require($entity.root.primaryKey)##
#foreach ($enumAttribute in $entity.uniqueEnumAttributes.list)
$output.require($enumAttribute)##
#end
$output.require("org.springframework.data.domain.*")##
$output.require("org.springframework.data.jpa.repository.JpaRepository")##
$output.require("org.springframework.data.querydsl.QueryDslPredicateExecutor")##
$output.require("org.springframework.data.querydsl.binding.QuerydslBinderCustomizer")##
$output.require("org.springframework.data.querydsl.binding.QuerydslBindings")##
$output.require("org.springframework.data.repository.CrudRepository")##
$output.requireMetamodel($entity.model)##

public interface $output.currentClass extends CrudRepository<$entity.model.type, $entity.root.primaryKey.type>, JpaRepository<$entity.model.type, $entity.root.primaryKey.type>, QueryDslPredicateExecutor<$entity.model.type>, QuerydslBinderCustomizer<Q$entity.model.type>{

    default List<$entity.model.type> complete(String query, int maxResults) {
        $entity.model.type probe = new ${entity.model.type}();
    #foreach($attr in $entity.printerAttributes.flatUp.list)
        #if($attr.isString() && !$attr.isEnum())
        probe.${attr.setter}(query);
            #break
        #end
    #end

        ExampleMatcher matcher = ExampleMatcher.matching() //
    #foreach($attr in $entity.printerAttributes.flatUp.list)
        #if($attr.isString() && !$attr.isEnum())
            .withMatcher(${entity.model.type}_.${attr.var}.getName(), match -> match.ignoreCase().startsWith())
            #break
        #end
    #end;

        Page<$entity.model.type> page = findAll(Example.of(probe, matcher), new PageRequest(0, maxResults));
        return page.getContent();
    }


#foreach ($uniqueAttribute in $entity.uniqueAttributes.list)

    /**
     * Return the persistent instance of {@link $entity.model.type} with the given unique property value ${uniqueAttribute.var},
     * or null if there is no such persistent instance.
     *
     * @param $uniqueAttribute.var the unique value
     * @return the corresponding {@link $entity.model.type} persistent instance or null
     */
$output.require("$uniqueAttribute.fullType")##
    $entity.model.type ${uniqueAttribute.uniqueGetter}($uniqueAttribute.type ${uniqueAttribute.var});
#end

    default void customize(QuerydslBindings bindings, Q$entity.model.type member) {
    }
}